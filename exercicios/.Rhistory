########################
# Instalação de pacotes
pacotes <- c(
'tidyverse',  # Pacote básico de datawrangling
'rpart',      # Biblioteca de árvores
'rpart.plot', # Conjunto com Rpart, plota a parvore
'gtools',     # funções auxiliares como quantcut,
'Rmisc',      # carrega a função sumarySE para a descritiva
'scales',     # importa paletas de cores
'viridis',    # Escalas 'viridis' para o ggplot2
'caret',       # Funções úteis para machine learning
'AMR',
'randomForest',
'fastDummies',
'rattle',
'xgboost',
'ggpubr',
'dplyr',
'caTools',
"plotly",
"knitr",
"kableExtra",
"fastDummies",
"rgl",
"car",
"reshape2",
"jtools",
"stargazer",
"lmtest",
"pROC",
"ROCR",
"nnet",
"cowplot","globals","equatiomatic", "factoextra"
)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
########################## Funções de apoio ####################################
descritiva <- function(var){
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(tmp, measurevar="survived", groupvars=c(var))
ggplot(tgc) +
# Plota o gráfico de barras com as frequências
geom_bar(aes(x=tgc[,var], weight=N/891, fill=as.factor(tgc[,var]))) +
# Plota as barras de erro
geom_errorbar(aes(x=tgc[,var], y=survived, ymin=survived-se, ymax=survived+se, colour='1'), width=.1) +
# Plota as médias de cada grupo
geom_point(aes(x=tgc[,var], y=survived, colour='1', group='1')) +
# Plota as linhas que conectam as médias
geom_line(aes(x=tgc[,var], y=survived, colour='1', group='1')) +
# Escala de cores do gráfico de médias
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
# Escala de cores do gráfico de barras
scale_fill_viridis_d(direction = -1, begin=.85, end=.95) +
# Estética mais 'leve' do gráfico
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey")) +
# Remove a legenda
theme(legend.position = "none") +
# Rótulo dos eixos
xlab(var) + ylab("Taxa de sobreviventes") +
# Marcas do eixo secundário
scale_y_continuous(sec.axis = sec_axis(~.*891, name = "Frequencia"), labels = scales::percent)
}
descritiva2 <- function(var, resp, df) {
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(df, measurevar = resp, groupvars = c(var))
maxN <- max(tgc$N)
# Gráfico de barras
p <- ggplot(tgc) +
geom_bar(aes(x = tgc[,var],
y = max(tgc[,resp])*N/maxN,
fill = as.factor(tgc[,var])),
position = "identity", stat = "identity",
alpha = 0.5) +
scale_fill_viridis_d(direction = -1, begin = .85, end = .95)
# Gráfico de linhas
p <- p +
geom_line(aes(x = tgc[,var], y = tgc[,resp]), colour = '1', group = '1') +
geom_point(aes(x = tgc[,var], y = tgc[,resp] ), colour = '1', group = '1') +
geom_errorbar(aes(x = tgc[,var],
y = tgc[,resp],
ymin = tgc[,resp] + qnorm(.025)*se,
ymax = tgc[,resp] + qnorm(.975)*se, colour = '1'), width = .5) +
#geom_point(aes(x = tgc[,var], y = tgc[,resp] - tgc[,ep]*qnorm(.975)), colour = '1', group = '1') +
scale_color_viridis_d(direction = -1, begin = 0, end = .25)
# Ajuste dos eixos
p <- p +
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey"),
axis.text = element_text(size = 14),  # Tamanho da fonte dos números dos eixos
axis.title = element_text(size = 16),  # Tamanho da fonte dos títulos dos eixos
legend.position = "none") +
xlab(var) + ylab("Barras")
p <- p +
scale_y_continuous(sec.axis = sec_axis(~ . *maxN/max(tgc[,resp]), name = "Frequencia", labels = scales::number)) +
ylab(resp) +
# Limite do eixo vertical esquerdo
coord_cartesian(ylim = c(min(tgc[,resp]) - 0.02, max(tgc[,resp]) + 0.02))
return(p)
}
#####################################
# Carregar arquivo de dados
#####################################
df <- read.csv("data/world_data.csv")
cor.test(df$consumo_energia, df$expectativa_vida, method=c(“pearson”))
cor.test(df$consumo_energia, df$expectativa_vida, method=c("pearson"))
library(esquisse)
esquisser()
library(esquisse)
esquisser()
library(tidyverse)
library(dplyr)
library(caret)
library(ggplot2)
library(plotly)
library(jtools)
library(kableExtra)
library(equatiomatic)
library(correlation)
library(see)
library(ggraph)
library(PerformanceAnalytics)
library(nortest)
library(lavaan)
library(qgraph)
library(olsrr)
library(car)
library(mctest)
#carrega o dataset
dataset <- read.csv("data/world_data.csv", sep = ",")
# Informações básicas do banco de dados
dim(dataset)
setwd("~/Área de Trabalho/GIT/Uniamerica/Visualização de Dados")
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
library(tidyverse)
library(dplyr)
library(caret)
library(ggplot2)
library(plotly)
library(jtools)
library(kableExtra)
library(equatiomatic)
library(correlation)
library(see)
library(ggraph)
library(PerformanceAnalytics)
library(nortest)
library(lavaan)
library(qgraph)
library(olsrr)
library(car)
library(mctest)
#carrega o dataset
dataset <- read.csv("data/world_data.csv", sep = ",")
# Informações básicas do banco de dados
# Informações básicas do banco de dados
dim(dataset)
glimpse(dataset)
View(dataset)
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
library(tidyverse)
library(dplyr)
library(caret)
library(ggplot2)
library(plotly)
library(jtools)
library(kableExtra)
library(equatiomatic)
library(correlation)
library(see)
library(ggraph)
library(PerformanceAnalytics)
library(nortest)
library(lavaan)
library(qgraph)
library(olsrr)
library(car)
library(mctest)
#carrega o dataset
dataset <- read.csv("data/world_data.csv", sep = ",")
# Informações básicas do banco de dados
dim(dataset)
glimpse(dataset)
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
library(tidyverse)
library(dplyr)
library(caret)
library(ggplot2)
library(plotly)
library(jtools)
library(kableExtra)
library(equatiomatic)
library(correlation)
library(see)
library(ggraph)
library(PerformanceAnalytics)
library(nortest)
library(lavaan)
library(qgraph)
library(olsrr)
library(car)
library(mctest)
#carrega o dataset
dataset <- read.csv("data/world_data.csv", sep = ",")
# Informações básicas do banco de dados
dim(dataset)
glimpse(dataset)
View(dataset)
#nomes das colunas anos
anos <- colnames(dataset[,5:29])
#renomeia colunas que não são anos
dataset <- dataset %>%
rename(pais = 1,
sigla = 2,
serie = 3,
codigo_serie = 4)
#seleciona apenas registros válidos
dataset <- dataset[1:4641,-c(4)]
#transforma as colunas ano uma coluna, repetindo o pais para cada ano
tmp <- pivot_longer(dataset,
cols = anos,
values_to = "valor")
tmp <- tmp %>% rename(ano = 4)
#transforma a serie em coluna
tmp <- pivot_wider(tmp,
id_cols = c("pais", "sigla", "ano"),
names_from = c("serie"),
values_from = "valor")
View(tmp)
#padroniza o campo ano
tmp <- tmp %>% mutate(ano = substr(ano,2,5))
as.data.frame(colnames(tmp))
View(tmp)
#renomear colunas
tmp <- tmp %>% rename(pib_corrente = 4,
pib_gasto_saude = 5,
pib_per_capita = 6,
pib_taxa_crescimento = 7,
pib_per_capita_crescimento = 8,
inflacao = 9,
expec_vida_mulheres = 10,
expec_vida_homens = 11,
expec_vida = 12,
desemprego_total = 13,
desemprego_ensino_superior = 14,
controle_corrupcao = 15,
acesso_energia_eletrica = 16,
cobertura_programas_sociais = 17,
acesso_agua_potavel = 18,
populacao_acima_65 = 19,
crescimento_populacao = 20,
densidade_populacional = 21,
populacao_total = 22,
populacao_urbana = 23,
populacao_rural = 24)
#converte para numérico
tmp <- tmp %>% mutate_at(c(4:24), as.numeric)
# Função para categorizar países em continentes
assign_continent <- function(country) {
if (country %in% c("Afghanistan", "Armenia", "Azerbaijan", "Bahrain", "Bangladesh", "Bhutan", "Brunei Darussalam",
"Cambodia", "China", "Georgia", "India", "Indonesia", "Iran, Islamic Rep.", "Iraq",
"Israel", "Japan", "Jordan", "Kazakhstan", "Korea, Dem. People's Rep.", "Korea, Rep.",
"Kuwait", "Kyrgyz Republic", "Lao PDR", "Lebanon", "Malaysia", "Maldives", "Mongolia",
"Myanmar", "Nepal", "Oman", "Pakistan", "Philippines", "Qatar", "Saudi Arabia",
"Singapore", "Sri Lanka", "Syrian Arab Republic", "Tajikistan", "Thailand", "Timor-Leste",
"Turkmenistan", "United Arab Emirates", "Uzbekistan", "Viet Nam", "Yemen, Rep.", "Russian Federation")) {
return("Asia")
} else if (country %in% c("Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cabo Verde",
"Cameroon", "Central African Republic", "Chad", "Comoros", "Congo, Dem. Rep.",
"Congo, Rep.", "Djibouti", "Egypt, Arab Rep.", "Equatorial Guinea", "Eritrea",
"Eswatini", "Ethiopia", "Gabon", "Gambia, The", "Ghana", "Guinea", "Guinea-Bissau",
"Ivory Coast", "Kenya", "Lesotho", "Liberia", "Libya", "Madagascar", "Malawi",
"Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", "Namibia", "Niger",
"Nigeria", "Rwanda", "Sao Tome and Principe", "Senegal", "Seychelles",
"Sierra Leone", "Somalia", "South Africa", "South Sudan", "Sudan", "Tanzania",
"Togo", "Tunisia", "Uganda", "Zambia", "Zimbabwe")) {
return("Africa")
} else if (country %in% c("Argentina", "Bolivia", "Brazil", "Chile", "Colombia", "Ecuador", "Guyana",
"Paraguay", "Peru", "Suriname", "Uruguay", "Venezuela, RB")) {
return("South America")
} else if (country %in% c("Curacao","Antigua and Barbuda", "Aruba", "Bahamas, The", "Barbados","Belize",
"Sint Maarten (Dutch part)", "St. Kitts and Nevis", "St. Lucia", "St. Martin (French part)",
"St. Vincent and the Grenadines","Virgin Islands (U.S.)","Bermuda","Dominica",
"Cayman Islands", "British Virgin Islands", "Cuba", "Dominican Republic",
"Saint Kitts and Nevis", "Saint Lucia",  "Grenada","Jamaica","Haiti",
"Turks and Caicos Islands", "Puerto Rico","Trinidad and Tobago",
"Saint Vincent and the Grenadines")) {
return("Caribe")
} else if (country %in% c("Canada", "Honduras",
"Costa Rica", "El Salvador",
"Guatemala",  "Mexico", "Nicaragua",
"Panama", "United States", "Greenland")) {
return("North America")
} else if (country %in% c("Albania", "Andorra", "Austria", "Belarus", "Belgium", "Bosnia and Herzegovina",
"Bulgaria", "Croatia", "Cyprus", "Czechia", "Denmark", "Estonia", "Faroe Islands",
"Finland", "France", "Germany", "Greece", "Hungary", "Iceland", "Ireland",
"Italy", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Malta",
"Monaco", "Montenegro", "Netherlands", "North Macedonia", "Norway",
"Poland", "Portugal", "Romania", "San Marino", "Serbia", "Slovak Republic",
"Slovenia", "Spain", "Sweden", "Switzerland", "Ukraine", "United Kingdom")) {
return("Europe")
} else if (country %in% c("Australia", "Fiji", "Kiribati", "Marshall Islands", "Micronesia, Fed. Sts.",
"Nauru", "New Zealand", "Palau", "Papua New Guinea", "Samoa", "Solomon Islands",
"Tonga", "Tuvalu", "Vanuatu", "American Samoa", "French Polynesia", "Guam", "New Caledonia", "Northern Mariana Islands")) {
return("Oceania")
} else if (country %in% c("World")) {
return("World")
} else {
return("Other")
}
}
# Aplicar a função aos países e criar o atributo continente
tmp$continente <- sapply(tmp$pais, assign_continent)
aux <- tmp %>% filter(continente == "Other")
unique(aux$pais)
tmp <- tmp %>% relocate(continente, .after="sigla")
View(tmp)
#salva o resultado em um novo arquivo
write.csv(tmp, "data/world_data.csv", fileEncoding = "UTF-8",  row.names = FALSE)
setwd("~/Área de Trabalho/GIT/Uniamerica/Visualização de Dados/exercicios")
library(ggplot2)
library(dplyr)
library(scales)
df <- read.csv("data/world_data_by_country.csv", sep=",")
df <- read.csv("data/world_data.csv", sep=",")
#Filtrar países de interesse
aux <- df %>% filter(continente %in% c("South America"))
#agrupar por país e calcula a média do período
aux <- aux %>%
group_by(pais) %>%
summarise(populacao_urbana = mean(populacao_urbana))
library(ggplot2)
library(dplyr)
library(scales)
df <- read.csv("data/world_data.csv", sep=",")
#Filtrar países de interesse
aux <- df %>% filter(continente %in% c("South America"))
#agrupar por país e calcula a média do período
aux <- aux %>%
group_by(pais) %>%
summarise(populacao_urbana = mean(populacao_urbana))
